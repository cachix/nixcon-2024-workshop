{-
   Flakestry API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: 0.1.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Api exposing
    ( getFlake
    , getOwner
    , getRepo
    , getVersion
    , postPublish
    )

import Api
import Api.Data exposing (..)
import Dict
import Http
import Json.Decode
import Json.Encode


getFlake : Maybe String -> Api.Request Api.Data.GetFlakeResponse
getFlake q_query =
    Api.request
        "GET"
        "/flake"
        []
        [ ( "q", Maybe.map identity q_query ) ]
        []
        Nothing
        Api.Data.getFlakeResponseDecoder


getOwner : String -> Api.Request Api.Data.GetOwnerResponse
getOwner owner_path =
    Api.request
        "GET"
        "/flake/github/{owner}"
        [ ( "owner", identity owner_path ) ]
        []
        []
        Nothing
        Api.Data.getOwnerResponseDecoder


getRepo : String -> String -> Api.Request Api.Data.GetRepoResponse
getRepo owner_path repo_path =
    Api.request
        "GET"
        "/flake/github/{owner}/{repo}"
        [ ( "owner", identity owner_path ), ( "repo", identity repo_path ) ]
        []
        []
        Nothing
        Api.Data.getRepoResponseDecoder


getVersion : String -> String -> String -> Api.Request Api.Data.Release
getVersion owner_path repo_path version_path =
    Api.request
        "GET"
        "/flake/github/{owner}/{repo}/{version}"
        [ ( "owner", identity owner_path ), ( "repo", identity repo_path ), ( "version", identity version_path ) ]
        []
        []
        Nothing
        Api.Data.releaseDecoder


postPublish : Api.Data.Publish -> Api.Request Api.Data.AnyType
postPublish publish_body =
    Api.request
        "POST"
        "/publish"
        []
        []
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodePublish publish_body)))
        Api.Data.anyTypeDecoder
